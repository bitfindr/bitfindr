import { of as obsOf } from 'rxjs/observable/of';

import { NavParamsMock } from './nav-params.mock';

export class ViewControllerMock {
  public static navController() {
    return {
      root: ViewControllerMock.instance(),
      rootParams: {},
      goToRoot: jest.fn(_ => Promise.resolve()),
      initPane: jest.fn(_ => 1),
      paneChanged: jest.fn(),
      push: jest.fn(_ => Promise.resolve()),
      insert: jest.fn(_ => Promise.resolve()),
      insertPage: jest.fn(_ => Promise.resolve()),
      pop: jest.fn(_ => Promise.resolve()),
      popTo: jest.fn(_ => Promise.resolve()),
      popToRoot: jest.fn(_ => Promise.resolve()),
      popAll: jest.fn(_ => Promise.resolve()),
      remove: jest.fn(_ => Promise.resolve()),
      removeView: jest.fn(_ => Promise.resolve()),
      setRoot: jest.fn(_ => Promise.resolve()),
      setPages: jest.fn(_ => Promise.resolve()),
      hasChildren: jest.fn(_ => true),
      getActiveChildNav: jest.fn(),
      registerChildNav: jest.fn(),
      unregisterChildNav: jest.fn(),
      destroy: jest.fn(),
      swipeBackStart: jest.fn(),
      swipeBackProgress: jest.fn(),
      swipeBackEnd: jest.fn(),
      canSwipeBack: jest.fn(_ => true),
      canGoBack: jest.fn(_ => true),
      isTransitioning: jest.fn(_ => false),
      setTransitioning: jest.fn(),
      getActive: jest.fn(_ => ViewControllerMock.instance()),
      isActive: jest.fn(_ => true),
      getByIndex: jest.fn(_ => ViewControllerMock.instance()),
      getPrevious: jest.fn(_ => ViewControllerMock.instance()),
      first: jest.fn(_ => ViewControllerMock.instance()),
      last: jest.fn(_ => ViewControllerMock.instance()),
      indexOf: jest.fn(_ => 0),
      length: jest.fn(_ => 0),
      getViews: jest.fn(_ => []),
      isSwipeBackEnabled: jest.fn(_ => true),
      dismissPageChangeViews: jest.fn(),
      setViewPort: jest.fn(),
      resize: jest.fn(),
      viewDidEnter: obsOf(),
      viewDidLeave: obsOf(),
      viewDidLoad: obsOf(),
      viewWillEnter: obsOf(),
      viewWillLeave: obsOf(),
      viewWillUnload: obsOf(),
    };
  }

  public static instance(): any {
    return {
      component: {},
      data: NavParamsMock.instance(),
      instance: {},
      id: '',
      willEnter: jest.fn(_ => obsOf({})),
      didEnter: jest.fn(_ => obsOf({})),
      willLeave: jest.fn(_ => obsOf({})),
      didLeave: jest.fn(_ => obsOf({})),
      willUnload: jest.fn(_ => obsOf({})),
      didUnload: jest.fn(_ => obsOf({})),
      dismiss: jest.fn(_ => Promise.resolve()),
      onDidDismiss: jest.fn(_ => Promise.resolve()),
      onWillDismiss: jest.fn(_ => Promise.resolve()),
      enableBack: jest.fn(_ => true),
      isFirst: jest.fn(_ => false),
      isLast: jest.fn(_ => false),
      pageRef: jest.fn(_ => ({})),
      getContent: jest.fn(_ => ({})),
      contentRef: jest.fn(_ => Promise.resolve()),
      hasNavbar: jest.fn(_ => true),
      index: jest.fn(_ => true),
      subscribe: jest.fn(_ => obsOf({})),
      getNav: jest.fn(_ => ({})),
      getIONContent: jest.fn(_ => ({})),
      writeReady: { emit(): void {}, subscribe(): any {} },
      readReady: { emit(): void {}, subscribe(): any {} },
      setBackButtonText: jest.fn(),
      showBackButton: jest.fn(),
      _setHeader: jest.fn(),
      _setNavbar: jest.fn(),
      _setNav: jest.fn(),
      _setInstance: jest.fn(),
      _setIONContent: jest.fn(),
      _setContent: jest.fn(),
      _setContentRef: jest.fn(),
      _setFooter: jest.fn(),
      _setIONContentRef: jest.fn(),
    };
  }
}
